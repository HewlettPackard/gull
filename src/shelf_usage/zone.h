/*
 *  (c) Copyright 2016-2021 Hewlett Packard Enterprise Development Company LP.
 *
 *  This software is available to you under a choice of one of two
 *  licenses. You may choose to be licensed under the terms of the 
 *  GNU Lesser General Public License Version 3, or (at your option)  
 *  later with exceptions included below, or under the terms of the  
 *  MIT license (Expat) available in COPYING file in the source tree.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef _NVMM_ZONE_H_
#define _NVMM_ZONE_H_

#include <stddef.h>
#include <stdint.h>

#include "nvmm/global_ptr.h"

namespace nvmm {

class Zone {
public:
  Zone(void *addr, size_t initial_pool_size, size_t min_object_size,
       uint64_t fast_alloc, size_t max_pool_size, void *helper,
       size_t helper_size);

  // Zone(void *addr, size_t initial_pool_size, size_t min_object_size,
  //     size_t max_pool_size, void *helper, size_t helper_size, void
  //     *zoneheader_ptr, size_t zoneheader_ptr_size);

  Zone(void *addr, size_t max_pool_size, void *helper, size_t helper_size);

  // Zone(void *addr, size_t max_pool_size, void *helper, size_t helper_size,
  // void *zoneheader_ptr, size_t zoneheader_size);

  ~Zone();

  // Static function to return header size
  static size_t get_header_size(size_t shelf_size, size_t min_obj_size);

  // returns 0 if no blocks are currently available
  Offset alloc(size_t size);
  // [unsafe_]free(0) is a no-op
  void free(Offset block);
  void merge();
  void
  offline_recover(); // grow, merge, and garbage collection; must run offline
  void online_recover(); // merge; can run online

  // TODO
  // void recover_online(); // for grow

  // TODO
  // requires all writes to block block have already been persisted
  //    void     unsafe_free(Offset block);

  bool IsValidOffset(Offset p);

  // converting between external Offset (with size encoded) and
  // local-address-space pointers
  void *OffsetToPtr(Offset p);
  Offset PtrToOffset(void *p);

  size_t get_bitmap_offset();

  // for delayed free
  uint64_t min_obj_size();

  Zone(const Zone &) = delete;
  Zone &operator=(const Zone &) = delete;

  // debugging
  void print_bitmap();
  void print_freelist();
  void stats();

private:
  char *shelf_location_ptr;
  char *header_ptr;
  size_t header_size;
  char *zone_header_ptr;
  size_t zone_header_size;

  // Starting address used for merge bitmap
  uint8_t *merge_bitmap_start_addr;

  // shortcut for from_Offset; does not work well on Zone*:
  //   need (*fba)[ptr] for that case
  void *operator[](Offset p) { return from_Offset(p); }

  // converting to and from local-address-space pointers (Offset is NOT encoded
  // with size)
  void *from_Offset(Offset p);
  Offset to_Offset(void *p);

  bool grow();
  bool is_grow_in_progress(struct Zone_Header *zoneheader);
  bool is_merge_in_progress(struct Zone_Header *zoneheader);
  uint64_t get_level(struct Zone_Header *zoneheader, Offset ptr);
  void modify_bitmap_bit(struct Zone_Header *zoneheader, uint64_t level,
                         Offset ptr, bool set);
  void set_bitmap_bit(struct Zone_Header *zoneheader, uint64_t level,
                      Offset ptr);
  void reset_bitmap_bit(struct Zone_Header *zoneheader, uint64_t level,
                        Offset ptr);
  bool merge(struct Zone_Header *zoneheader, uint64_t level);
  void grow_crash_recovery();
  void merge_crash_recovery();
  void garbage_collection();
  void clear_data(Offset block, struct Zone_Header *zoneheader, uint64_t level);

  bool enter_merge(struct Zone_Header *zoneheader);
  bool leave_merge(struct Zone_Header *zoneheader);
  void swap_freelist(struct Zone_Header *zoneheader, uint64_t level);
  void create_merge_bitmap(struct Zone_Header *zoneheader, uint64_t level);
  void do_merge(struct Zone_Header *zoneheader, uint64_t level);
  void finish_merge(struct Zone_Header *zoneheader, uint64_t level);
};


/***************************************************************************/
/*                                                                         */
/* Implementation-only details follow                                      */
/*                                                                         */
/***************************************************************************/

inline void* Zone::from_Offset(Offset p) {
    if (p == 0)
        return NULL;
    else
        return (char*)shelf_location_ptr + p;
}

inline Offset Zone::to_Offset(void* p) {
    if (p == NULL)
        return 0;
    else
        return (char*)p - (char*)shelf_location_ptr;
}

}

#endif
