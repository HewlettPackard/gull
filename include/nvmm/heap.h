/*
 *  (c) Copyright 2016-2021,2023 Hewlett Packard Enterprise Development Company
 * LP.
 *
 *  This software is available to you under a choice of one of two
 *  licenses. You may choose to be licensed under the terms of the
 *  GNU Lesser General Public License Version 3, or (at your option)
 *  later with exceptions included below, or under the terms of the
 *  MIT license (Expat) available in COPYING file in the source tree.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef _NVMM_HEAP_H_
#define _NVMM_HEAP_H_

#include "nvmm/epoch_manager.h"
#include "nvmm/error_code.h"
#include "nvmm/global_ptr.h"

namespace nvmm {

#define NVMM_NO_BG_THREAD 0x0001
#define NVMM_FAST_ALLOC 0x0010

class Heap {
  public:
    virtual ~Heap(){};

    virtual ErrorCode Open(int flags = 0) = 0;
    virtual ErrorCode Close() = 0;
    virtual bool IsOpen() = 0;
    virtual bool IsInvalid() = 0;

    virtual ErrorCode Map(Offset offset, size_t size, void *addr_hint, int prot,
                          void **mapped_addr) = 0;
    virtual ErrorCode Unmap(Offset offset, void *mapped_addr, size_t size) = 0;

    virtual GlobalPtr Alloc(size_t size) = 0;
    virtual void Free(GlobalPtr global_ptr) = 0;

    virtual GlobalPtr Alloc(EpochOp &op, size_t size) { return (GlobalPtr)0; };
    virtual void Free(EpochOp &op, GlobalPtr global_ptr){};
    virtual void Free(EpochOp &op, Offset offset){};

    // Functions for Offset based free and alloc function
    virtual Offset AllocOffset(size_t size) { return 0; };
    virtual void Free(Offset offset){};

    virtual ErrorCode Resize(size_t size, ShelfIndex *new_shelf_idx = NULL) = 0;
    virtual ErrorCode SetPermission(mode_t mode) = 0;
    virtual ErrorCode GetPermission(mode_t *mode) = 0;

    virtual void *OffsetToLocal(Offset offset) { return NULL; };
    virtual size_t MinAllocSize() { return 0; };
    virtual void Merge(){};
    virtual void OfflineRecover(){};
    virtual void OnlineRecover(){};
    virtual void Stats(){};
    virtual size_t Size() { return 0; };
    virtual void OfflineFree(){};
    virtual void delayed_free_fn(){};
    virtual ErrorCode getStartAddress(int &numShelfs, void **&address,
                                      size_t *&Shelfsize) = 0;
};

} // namespace nvmm
#endif
