/*
 *  (c) Copyright 2016-2022 Hewlett Packard Enterprise Development Company LP.
 *
 *  This software is available to you under a choice of one of two
 *  licenses. You may choose to be licensed under the terms of the
 *  GNU Lesser General Public License Version 3, or (at your option)
 *  later with exceptions included below, or under the terms of the
 *  MIT license (Expat) available in COPYING file in the source tree.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef _NVMM_MEMORY_MANAGER_H_
#define _NVMM_MEMORY_MANAGER_H_

#include <memory>

#include "nvmm/error_code.h"
#include "nvmm/global_ptr.h" // for GlobalPtr
#include "nvmm/shelf_id.h"   // for PoolId

#include "nvmm/heap.h"
#include "nvmm/region.h"

namespace nvmm {

#define METADATA_REGION_ID 1
#define METADATA_REGION_NAME 2
#define ATL_REGION_DATA 3

// Global bootstrapping functions for NVMM

// config nvmm such that shelves will be created at base/, and with user as
// prefix to each shelf Create necessary files to bootstrap the memory manager
// and epoch manager file name this function is NOT thread-safe/process-safe
// this function must run once and only once in both single-node and multi-node
// environments, before the first call to GetInstance()
int StartNVMM(std::string base = "", std::string user = "");

// Delete all previous shelves, resetting both the memory manager and epoch
// manager this function is NOT thread-safe/process-safe this function can only
// run when no one is using the memory manager
void ResetNVMM(std::string base = "", std::string user = "");

// Restart current memory manager and epoch manager instances
// used when one wants to switch to another base/user or wants to fork()
// this will stop current instances, remove all existing shelves, change base
// and user if necessary, and finally starting from fresh this function assumes
// that there is already a running NVMM instance; it can only be called after
// NVMM has been bootstrapped
void RestartNVMM(std::string base = "", std::string user = "");

// TODO: Current limitation:
// - No pool-id management/assignment (clients of mm must agree upon a set of
// pool ids that each wants to use, e.g., 1 and 2 for item store, 3 for metadata
// store, etc)
// - No multi-process support for pool (heap/region) creation and destroy
class MemoryManager {
  public:
    // there is only one instance of MemoryManager in a process
    // return a pointer to the instance
    static MemoryManager *GetInstance();

    // helper functions to make it work with fork
    // be careful that there may be other threads using this instance!
    // before forking, stop all the threads; after forking, start all the
    // threads both functions are not thread/process safe
    void Start();
    void Stop();

    /*
       methods to access a global pointer with its size known
       internally, mm only maps the pointer + size
       currently used by Zero-copy version of Get and Put
    */
    ErrorCode MapPointer(GlobalPtr ptr, size_t size, void *addr_hint, int prot,
                         int flags, void **mapped_addr);
    ErrorCode UnmapPointer(GlobalPtr ptr, void *mapped_addr, size_t size);

    /*
       methods to access a global pointer, without knowning its size
       internally, mm would use ShelfManager to map entire shelf if it is not
       mapped for general use cases (e.g., accessing a pointer allocated from a
       Heap)
    */
    void *GlobalToLocal(GlobalPtr ptr);
    GlobalPtr LocalToGlobal(void *addr);

    /*
       a heap provides Alloc/Free APIs
    */
    // Create a heap with the given id
    // NOTE: size is the default shelf size; not the total size of the heap
    // Return
    // - NO_ERROR: heap was created
    // - ID_FOUND: the given id is in use
    ErrorCode CreateHeap(PoolId id, size_t shelf_size,
                         size_t min_alloc_size = 64, uint64_t flags = 0,
                         mode_t mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);

    // Destroy the heap with the given id
    // Return
    // - NO_ERROR: heap was destroyed
    // - ID_NOT_FOUND: heap of the given id is not found
    // NOTE
    // - caller must make sure no other processes are still accessing this heap
    ErrorCode DestroyHeap(PoolId id);

    // Find the heap by id and return a pointer to the heap object if it exists
    // Caller is responsible for freeing the poitner
    // Return
    // - NO_ERROR: heap is found and returned
    // - ID_NOT_FOUND: heap of the given id is not found
    // NOTE
    // - It will always return a new heap object even if the heap was already
    // created/opened in the same process
    // - The best use pattern is to find and open a heap once in a process
    ErrorCode FindHeap(PoolId id, Heap **heap);

    // Find the heap by id and return a pointer to the heap object if it exists
    // Caller is responsible for freeing the poitner
    // Return NULL if heap of the given id is not found
    Heap *FindHeap(PoolId id);

    /*
      a region provides direct memory mapping APIs
    */
    // Create a region with the given id
    // Return
    // - NO_ERROR: region was created
    // - ID_FOUND: the given id is in use
    ErrorCode CreateRegion(PoolId id, size_t size);

    // Destroy the region with the given id
    // Return
    // - NO_ERROR: region was destroyed
    // - ID_NOT_FOUND: region of the given id is not found
    // NOTE
    // - caller must make sure no other processes are still accessing this heap
    ErrorCode DestroyRegion(PoolId id);

    // Find the region by id and return a pointer to the region object if it
    // exists Caller is responsible for freeing the poitner Return
    // - NO_ERROR: region is found and returned
    // - ID_NOT_FOUND: region of the given id is not found
    // NOTE
    // - It will always return a new region object even if the region was
    // already created/opened in the same process
    // - The best use pattern is to find and open a region once in a process
    ErrorCode FindRegion(PoolId id, Region **region);

    // Find the region by id and return a pointer to the region object if it
    // exists Caller is responsible for freeing the poitner Return NULL if
    // region of the given id is not found
    Region *FindRegion(PoolId id);

    // Return the address reserved for bitmap for region id
    // management in memory server
    void *GetRegionIdBitmapAddr();

    // Return the global pointer for metadata region id or region name
    // based of type. type is METADATA_REGION_ID or METADATA_REGION_NAME
    GlobalPtr GetMetadataRegionRootPtr(int type);

    // Set the global pointer for metadata region id or region name
    // based on type as METADATA_REGION_ID or METADATA_REGION_NAME
    GlobalPtr SetMetadataRegionRootPtr(int type, GlobalPtr);

    // Return the global pointer for ATL region data
    GlobalPtr GetATLRegionRootPtr(int type);

    // Set the global pointer for ATL region data
    GlobalPtr SetATLRegionRootPtr(int type, GlobalPtr);

  private:
    MemoryManager();
    ~MemoryManager();

    class Impl_;
    // std::unique_ptr<Impl_> pimpl_;
    Impl_ *pimpl_;
};
} // namespace nvmm
#endif
