/*
 *  (c) Copyright 2016-2021 Hewlett Packard Enterprise Development Company LP.
 *
 *  This software is available to you under a choice of one of two
 *  licenses. You may choose to be licensed under the terms of the
 *  GNU Lesser General Public License Version 3, or (at your option)
 *  later with exceptions included below, or under the terms of the
 *  MIT license (Expat) available in COPYING file in the source tree.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef _NVMM_REGION_H_
#define _NVMM_REGION_H_

#include "nvmm/error_code.h"
#include "nvmm/shelf_id.h"

#include <fcntl.h>    // for O_RDWR
#include <sys/mman.h> // for PROT_READ, PROT_WRITE, MAP_SHARED

namespace nvmm {

class Region {
  public:
    virtual ~Region(){};

    // flags is the same as flags in open()
    // O_RDONLY, O_WRONLY, or O_RDWR
    virtual ErrorCode Open(int flags) = 0;
    virtual ErrorCode Close() = 0;
    virtual bool IsOpen() = 0;

    virtual size_t Size() = 0;

    // prot is the same as prot in mmap(): PROT_NONE, PROT_READ, or PROT_WRITE
    // flags is also the same as flags in mmap(): MAP_SHARED, or MAP_PRIVATE
    virtual ErrorCode Map(void *addr_hint, size_t length, int prot, int flags,
                          loff_t offset, void **mapped_addr) = 0;
    virtual ErrorCode Unmap(void *mapped_addr, size_t length) = 0;
};

} // namespace nvmm
#endif
